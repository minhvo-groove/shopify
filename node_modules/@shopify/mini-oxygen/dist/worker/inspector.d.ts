import * as ws from 'ws';
import { SourceMapConsumer } from 'source-map';
import { Protocol } from 'devtools-protocol';

interface InspectorWebSocketTarget {
    id: string;
    title: string;
    type: 'node';
    description?: string;
    webSocketDebuggerUrl: string;
    devtoolsFrontendUrl: string;
    devtoolsFrontendUrlCompat: string;
    faviconUrl: string;
    url: string;
}
type MessageData = {
    id: number;
    result: unknown;
} & ({
    method: 'Debugger.scriptParsed';
    params: Protocol.Debugger.ScriptParsedEvent;
} | {
    method: 'Runtime.consoleAPICalled';
    params: Protocol.Runtime.ConsoleAPICalledEvent;
} | {
    method: 'Runtime.exceptionThrown';
    params: Protocol.Runtime.ExceptionThrownEvent;
});
interface ErrorProperties {
    message?: string;
    cause?: unknown;
    stack?: string;
}
declare function createInspectorConnector(options: {
    privateInspectorPort: number;
    publicInspectorPort?: number;
    sourceMapPath: string;
    workerName: string;
}): (onBeforeConnect?: () => void | Promise<void>) => Promise<void>;
type InspectorConnection = ReturnType<typeof connectToInspector>;
interface InspectorOptions {
    /**
     * The websocket URL exposed by Workers that the inspector should connect to.
     */
    inspectorUrl: string;
    /**
     * Sourcemap path, so that stacktraces can be interpretted
     */
    sourceMapPath?: string | undefined;
}
declare function connectToInspector({ inspectorUrl, sourceMapPath }: InspectorOptions): {
    ws: ws;
    send: <Request = unknown, Response = unknown>(method: string, params?: Request) => Promise<Response> | Promise<undefined>;
    reconstructError: (initialProperties: ErrorProperties, ro?: Protocol.Runtime.RemoteObject) => Promise<Error>;
    sourceMapPath: string | undefined;
    getSourceMapConsumer: () => Promise<SourceMapConsumer | undefined>;
    cleanupMessageQueue: (data: {
        id: number;
        result: unknown;
    }) => boolean;
    isClosed: () => boolean;
    close: () => void;
};

export { type ErrorProperties, type InspectorConnection, type InspectorWebSocketTarget, type MessageData, createInspectorConnector };
